using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.Extensions.Configuration;
using Npgsql;
using System.Data;

namespace PredictiveMaintenanceForIndustrialEquipment.Services
{
    // Represents a single training or prediction sample.
    public class InputData
    {
        // First parameter of the input sample.
        [LoadColumn(0)]
        public float Parameter1 { get; set; }

        // Second parameter of the input sample.
        [LoadColumn(1)]
        public float Parameter2 { get; set; }

        // Third parameter of the input sample.
        [LoadColumn(2)]
        public float Parameter3 { get; set; }

        // The target value (label) that the model learns to predict.
        [LoadColumn(3)]
        public float PredictiveValue { get; set; }
    }

    // Holds the prediction produced by the ML model.
    public class Prediction
    {
        // The score generated by the model.
        [ColumnName("Score")]
        public float PredictiveValue { get; set; }
    }

    // This service encapsulates training, predictions, and persistence operations.
    public class PredictionService
    {
        private readonly MLContext _mlContext;
        private readonly string _connectionString;

        // Constructor: reads the PostgreSQL connection string from app settings.
        public PredictionService(IConfiguration configuration)
        {
            _mlContext = new MLContext();
            _connectionString = configuration.GetConnectionString("PostgresConnection");
        }

        /// <summary>
        /// Loads training data from the PostgreSQL "training_data" table.
        /// Ensure that the table has columns: Parameter1, Parameter2, Parameter3, PredictiveValue.
        /// </summary>
        /// <returns>An IDataView containing all the training samples.</returns>
        public IDataView LoadDataFromDatabase()
        {
            var trainingDataSamples = new List<InputData>();

            // Open a connection to the PostgreSQL database.
            using (var connection = new NpgsqlConnection(_connectionString))
            {
                connection.Open();

                // SQL query to retrieve all rows from the training_data table.
                string sqlQuery = "SELECT \"Parameter1\", \"Parameter2\", \"Parameter3\", \"PredictiveValue\" FROM training_data";

                using (var command = new NpgsqlCommand(sqlQuery, connection))
                using (var reader = command.ExecuteReader())
                {
                    // Read each row and convert it into an InputData object.
                    while (reader.Read())
                    {
                        var sample = new InputData
                        {
                            Parameter1 = reader.GetFloat(0),
                            Parameter2 = reader.GetFloat(1),
                            Parameter3 = reader.GetFloat(2),
                            PredictiveValue = reader.GetFloat(3)
                        };
                        trainingDataSamples.Add(sample);
                    }
                }
            }

            // Convert the list to an ML.NET IDataView.
            return _mlContext.Data.LoadFromEnumerable(trainingDataSamples);
        }

        /// <summary>
        /// Inserts a new training data sample into the PostgreSQL database.
        /// </summary>
        /// <param name="dataSample">The data sample to insert.</param>
        public void InsertTrainingData(InputData dataSample)
        {
            using (var connection = new NpgsqlConnection(_connectionString))
            {
                connection.Open();

                // SQL INSERT statement to add new training data.
                string insertSql = "INSERT INTO training_data (\"Parameter1\", \"Parameter2\", \"Parameter3\", \"PredictiveValue\") VALUES (@p1, @p2, @p3, @pv)";

                using (var command = new NpgsqlCommand(insertSql, connection))
                {
                    // Use parameters to safeguard against SQL injection.
                    command.Parameters.AddWithValue("p1", dataSample.Parameter1);
                    command.Parameters.AddWithValue("p2", dataSample.Parameter2);
                    command.Parameters.AddWithValue("p3", dataSample.Parameter3);
                    command.Parameters.AddWithValue("pv", dataSample.PredictiveValue);
                    command.ExecuteNonQuery();
                }
            }
        }

        /// <summary>
        /// Deletes all .zip files in the specified directory.
        /// This ensures only the latest model is stored.
        /// </summary>
        /// <param name="directoryPath">The folder path to search for .zip files.</param>
        public void DeleteOldModelFiles(string directoryPath)
        {
            // Get all zip files in the folder.
            var modelZipFiles = Directory.GetFiles(directoryPath, "*.zip");
            foreach (var file in modelZipFiles)
            {
                File.Delete(file);
            }
        }

        /// <summary>
        /// Trains a regression model using the specified training data.
        /// </summary>
        /// <param name="trainingData">The IDataView that contains training samples.</param>
        /// <returns>The trained ML.NET model.</returns>
        public ITransformer TrainModel(IDataView trainingData)
        {
            // Build a pipeline that concatenates feature columns and trains a regression model.
            var pipeline = _mlContext.Transforms.Concatenate("Features", "Parameter1", "Parameter2", "Parameter3")
                           .Append(_mlContext.Regression.Trainers.Sdca(labelColumnName: "PredictiveValue", maximumNumberOfIterations: 100));

            // Fit the model using the training data.
            ITransformer model = pipeline.Fit(trainingData);
            return model;
        }

        /// <summary>
        /// Uses the trained model to make a prediction based on the input sample.
        /// </summary>
        /// <param name="trainedModel">The ML.NET model that has been trained.</param>
        /// <param name="inputSample">The sample data on which to predict.</param>
        /// <returns>A Prediction object containing the predicted value.</returns>
        public Prediction MakePrediction(ITransformer trainedModel, InputData inputSample)
        {
            // Create a prediction engine for making a single prediction.
            var predictionEngine = _mlContext.Model.CreatePredictionEngine<InputData, Prediction>(trainedModel);
            return predictionEngine.Predict(inputSample);
        }

        /// <summary>
        /// Saves the ML.NET model (with its schema) to a .zip file.
        /// </summary>
        /// <param name="model">The trained model to save.</param>
        /// <param name="modelFilePath">The file path where the model should be saved.</param>
        /// <param name="modelSchema">The schema of the training data.</param>
        public void SaveModel(ITransformer model, string modelFilePath, DataViewSchema modelSchema)
        {
            _mlContext.Model.Save(model, modelSchema, modelFilePath);
        }

        /// <summary>
        /// Loads a saved ML.NET model from a .zip file.
        /// </summary>
        /// <param name="modelFilePath">The file path of the saved model.</param>
        /// <returns>The loaded ML.NET model.</returns>
        public ITransformer LoadModel(string modelFilePath)
        {
            ITransformer model = _mlContext.Model.Load(modelFilePath, out var modelSchema);
            return model;
        }
    }
}